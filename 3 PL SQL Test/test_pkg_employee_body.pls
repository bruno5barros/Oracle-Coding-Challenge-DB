create or replace PACKAGE BODY test_pkg_employee IS

   /* generated by utPLSQL for SQL Developer on 2021-03-27 00:30:25 */

   --
   -- test get_employee   --
   PROCEDURE p_get_employee IS
      l_actual   INTEGER := 90001;
      v_emp_row_actual employees%rowtype;
      l_expected employees%rowtype;
   BEGIN
      select * into v_emp_row_actual from employees where employee_id = l_actual;
      l_expected := pkg_employee.get_employee(l_actual);

      -- assert
      ut.expect(v_emp_row_actual.EMPLOYEE_NAME).to_equal(l_expected.EMPLOYEE_NAME);
   END p_get_employee;
   
    -- test get_employee   --
   PROCEDURE p_employeeno_data_found IS
      l_expected   INTEGER := 0;
      v_emp_name_expected varchar2(3):= null;
      l_actual employees%rowtype;
   BEGIN
      l_actual := pkg_employee.get_employee(l_expected);

      -- assert
      ut.expect(l_actual.EMPLOYEE_NAME).to_equal(v_emp_name_expected);
   END p_employeeno_data_found;

   --
   -- test create_employee   --
   PROCEDURE p_create_employee IS
      l_actual   varchar2(50);
      l_expected varchar2(50) := 'Employee created with sucess.';
   BEGIN
      -- populate actual
      l_actual := PKG_EMPLOYEE.CREATE_EMPLOYEE(
        V_EMPLOYEE_NAME => 'Bruno Barros',
        V_JOB_TITLE => 'Developer',
        V_MANAGER_ID => 1,
        V_DATE_HIRED => to_date('2021-04-01','yyyy-MM-dd'),
        V_SALARY => 40000,
        V_DEPARTMENT_ID => 1
      );

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END p_create_employee;
   
   -- test create_employee   --
   PROCEDURE p_create_emp_fk_constraing IS
      l_actual   varchar2(100);
      l_expected varchar2(100) := null;
   BEGIN
      -- populate actual
      l_actual := PKG_EMPLOYEE.CREATE_EMPLOYEE(
        V_EMPLOYEE_NAME => 'Bruno Barros',
        V_JOB_TITLE => 'Developer',
        V_MANAGER_ID => 1,
        V_DATE_HIRED => to_date('2021-04-01','yyyy-MM-dd'),
        V_SALARY => 40000,
        V_DEPARTMENT_ID => 0
      );

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END p_create_emp_fk_constraing;
   
   
   -- test create_employee   --
   PROCEDURE p_emp_not_null_const IS
      l_actual   varchar2(100);
      l_expected varchar2(100) := null;
   BEGIN
      -- populate actual
      l_actual := PKG_EMPLOYEE.CREATE_EMPLOYEE(
        V_EMPLOYEE_NAME => 'Bruno Barros',
        V_JOB_TITLE => 'Developer',
        V_MANAGER_ID => 1,
        V_DATE_HIRED => to_date('2021-04-01','yyyy-MM-dd'),
        V_SALARY => null,
        V_DEPARTMENT_ID => 1
      );

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END p_emp_not_null_const;

   --
   -- test increase_salary   --
   PROCEDURE p_increase_salary IS
      l_actual   VARCHAR2(50);
      l_expected VARCHAR2(50) := 'Employee salary updated with sucess.';
   BEGIN
      -- populate actual
      l_actual := PKG_EMPLOYEE.INCREASE_SALARY(
        V_ID => 90001,
        V_SALARY_RAISE => 1.2
      );

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END p_increase_salary;
   
   
    -- test increase_salary   --
   PROCEDURE p_inc_sal_no_user IS
      l_actual   VARCHAR2(50);
      l_expected VARCHAR2(50) := 'There is no employee with the selected id.';
   BEGIN
      -- populate actual
      l_actual := PKG_EMPLOYEE.INCREASE_SALARY(
        V_ID => 0,
        V_SALARY_RAISE => 1.2
      );

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END p_inc_sal_no_user;
   
   
   -- test increase_salary   --
   PROCEDURE p_inc_sal_w_sal_percent IS
      l_actual   VARCHAR2(100);
      l_expected VARCHAR2(100) := 'The Percentage of the salary increase has to be between 1 and 2.';
   BEGIN
      -- populate actual
      l_actual := PKG_EMPLOYEE.INCREASE_SALARY(
        V_ID => 0,
        V_SALARY_RAISE => 0
      );

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END p_inc_sal_w_sal_percent;
   
   -- test increase_salary   --
   PROCEDURE p_inc_sal_w_sal_percent2 IS
      l_actual   VARCHAR2(100);
      l_expected VARCHAR2(100) := 'The Percentage of the salary increase has to be between 1 and 2.';
   BEGIN
      -- populate actual
      l_actual := PKG_EMPLOYEE.INCREASE_SALARY(
        V_ID => 0,
        V_SALARY_RAISE => 3
      );

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END p_inc_sal_w_sal_percent2;

   --
   -- test decrease_salary   --
   PROCEDURE decrease_salary IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- pkg_employee.decrease_salary;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END decrease_salary;

   --
   -- test transfer_employee   --
   PROCEDURE transfer_employee IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- pkg_employee.transfer_employee;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END transfer_employee;

   --
   -- test get_salary   --
   PROCEDURE get_salary IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- pkg_employee.get_salary;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END get_salary;

END test_pkg_employee;